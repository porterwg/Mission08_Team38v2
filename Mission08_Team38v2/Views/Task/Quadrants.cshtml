   @model IEnumerable<Mission08_Team38v2.Models.Task>

@{
    ViewData["Title"] = "Task Quadrants";
}

<div class="container mt-4">
    <h2 class="text-center">Task Quadrants</h2>

    <div class="row">
        <!-- Quadrant I: Important / Urgent -->
        <div class="col-md-6 mb-4">
            <div class="card" style="background-color: #ff6961; color: white;">
                <div class="card-header">
                    <h4>Quadrant I: Important / Urgent</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var task in Model.Where(t => t.Quadrant == 1 && !t.Completed))
                    {
                        <li class="list-group-item" style="background-color: #ff6961; color: white;">
                            <strong>@task.TaskName</strong> - Due: @task.DueDate?.ToString("MM/dd/yyyy")
                            <br>
                            <small>Category: @task.Category?.CategoryName</small>
                            <div class="mt-2">
                                <button class="btn btn-warning btn-sm"
                                        onclick="openEditModal('@task.TaskId', '@task.TaskName', '@task.DueDate', '@task.CategoryId')">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                        onclick="openDeleteModal('@task.TaskId')">
                                    Delete
                                </button>
                                <button class="btn btn-success btn-sm"
                                        onclick="markAsCompleted('@task.TaskId')">
                                    Mark as Completed
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Quadrant II: Important / Not Urgent -->
        <div class="col-md-6 mb-4">
            <div class="card" style="background-color: #ffb347; color: white;">
                <div class="card-header">
                    <h4>Quadrant II: Important / Not Urgent</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var task in Model.Where(t => t.Quadrant == 2 && !t.Completed))
                    {
                        <li class="list-group-item" style="background-color: #ffb347; color: white;">
                            <strong>@task.TaskName</strong> - Due: @task.DueDate?.ToString("MM/dd/yyyy")
                            <br>
                            <small>Category: @task.Category?.CategoryName</small>
                            <div class="mt-2">
                                <button class="btn btn-warning btn-sm"
                                        onclick="openEditModal('@task.TaskId', '@task.TaskName', '@task.DueDate', '@task.CategoryId')">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                        onclick="openDeleteModal('@task.TaskId')">
                                    Delete
                                </button>
                                <button class="btn btn-success btn-sm"
                                        onclick="markAsCompleted('@task.TaskId')">
                                    Mark as Completed
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Quadrant III: Not Important / Urgent -->
        <div class="col-md-6 mb-4">
            <div class="card" style="background-color: #77dd77; color: white;">
                <div class="card-header">
                    <h4>Quadrant III: Not Important / Urgent</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var task in Model.Where(t => t.Quadrant == 3 && !t.Completed))
                    {
                        <li class="list-group-item" style="background-color: #77dd77; color: white;">
                            <strong>@task.TaskName</strong> - Due: @task.DueDate?.ToString("MM/dd/yyyy")
                            <br>
                            <small>Category: @task.Category?.CategoryName</small>
                            <div class="mt-2">
                                <button class="btn btn-warning btn-sm"
                                        onclick="openEditModal('@task.TaskId', '@task.TaskName', '@task.DueDate', '@task.CategoryId')">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                        onclick="openDeleteModal('@task.TaskId')">
                                    Delete
                                </button>
                                <button class="btn btn-success btn-sm"
                                        onclick="markAsCompleted('@task.TaskId')">
                                    Mark as Completed
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Quadrant IV: Not Important / Not Urgent -->
        <div class="col-md-6 mb-4">
            <div class="card" style="background-color: #aec6cf; color: white;">
                <div class="card-header">
                    <h4>Quadrant IV: Not Important / Not Urgent</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var task in Model.Where(t => t.Quadrant == 4 && !t.Completed))
                    {
                        <li class="list-group-item" style="background-color: #aec6cf; color: white;">
                            <strong>@task.TaskName</strong> - Due: @task.DueDate?.ToString("MM/dd/yyyy")
                            <br>
                            <small>Category: @task.Category?.CategoryName</small>
                            <div class="mt-2">
                                <button class="btn btn-warning btn-sm"
                                        onclick="openEditModal('@task.TaskId', '@task.TaskName', '@task.DueDate', '@task.CategoryId')">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                        onclick="openDeleteModal('@task.TaskId')">
                                    Delete
                                </button>
                                <button class="btn btn-success btn-sm"
                                        onclick="markAsCompleted('@task.TaskId')">
                                    Mark as Completed
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-labelledby="deleteTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTaskModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this task?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
    function openDeleteModal(id) {
        $('#confirmDeleteBtn').off('click').on('click', function () {
            confirmDelete(id);
        });
        $('#deleteTaskModal').modal('show');
    }

    function confirmDelete(id) {
        $.ajax({
            type: "POST",
            url: `/Task/Delete/${id}`,
            success: function () {
                location.reload();
            },
            error: function () {
                alert("Error deleting the task.");
            }
        });
    }

    function markAsCompleted(id) {
        $.ajax({
            type: "POST",
            url: `/Task/Complete/${id}`,
            success: function () {
                location.reload();
            },
            error: function () {
                alert("Error marking task as completed.");
            }
        });
    }

    function openEditModal(id, name, dueDate, categoryId) {
        $('#editTaskId').val(id);
        $('#editTaskName').val(name);
        $('#editDueDate').val(dueDate);
        $('#editCategory').val(categoryId);
        $('#editTaskModal').modal('show');
    }
</script>

<!-- Edit Task Modal -->
<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("_EditTaskForm", new Mission08_Team38v2.Models.Task())
            </div>
        </div>
    </div>
</div>

<script>
    function openEditModal(id, name, dueDate, categoryId) {
        $('#editTaskId').val(id);
        $('#editTaskName').val(name);
        $('#editDueDate').val(formatDateForInput(dueDate));
        $('#editCategory').val(categoryId);
        $('#editTaskModal').modal('show');
    }

    function formatDateForInput(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = ('0' + (date.getMonth() + 1)).slice(-2);
        const day = ('0' + date.getDate()).slice(-2);
        return `${year}-${month}-${day}`;
    }

    $('#editTaskForm').submit(function (event) {
        event.preventDefault(); // Prevent default form submission

        var taskId = $('#editTaskId').val();
        var taskData = {
            TaskId: taskId,
            TaskName: $('#editTaskName').val(),
            DueDate: $('#editDueDate').val(),
            CategoryId: $('#editCategory').val()
        };

        $.ajax({
            type: "POST",
            url: `/Task/Edit/${taskId}`, // Make sure this matches your route
            data: JSON.stringify(taskData),
            contentType: "application/json",
            success: function (response) {
                if (response.success) {
                    location.reload(); // Reload the page on success
                } else {
                    alert("Failed to update task.");
                }
            },
            error: function () {
                alert("Error updating task.");
            }
        });
    });
</script>

